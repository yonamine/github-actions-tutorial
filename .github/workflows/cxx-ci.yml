#
# References:
# - General
#   - https://learn.microsoft.com/en-us/vcpkg/github-integration
#   - https://docs.github.com/en/actions/quickstart
#   - https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
#   - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#   - https://docs.github.com/en/enterprise-cloud@latest/actions/using-jobs/using-a-matrix-for-your-jobs
# - Windows
#   - https://learn.microsoft.com/en-us/visualstudio/install/tools-for-managing-visual-studio-instances?view=vs-2022
#   - Add Visual Studio's support: https://github.com/ilammy/msvc-dev-cmd/
# - Examples
#   - https://docs.github.com/en/actions/examples/using-concurrency-expressions-and-a-test-matrix
# - Other libraries
#   - https://github.com/curl/curl/blob/master/.github/workflows/
#   - https://github.com/ocornut/imgui/blob/master/.github/workflows/
#
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if
# you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: C++ CI

# When the action can run
on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

env:
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_PLATFORM: x64
  BUILD_CONFIGURATION: Debug
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VCPKG_FEATURE_FLAGS: dependencygraph

jobs:
  build:
    runs-on: ${{ matrix.os }}
    # runs-on: self-hosted

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # Linux: https://github.com/actions/runner-images/tree/win22/20231002.1/images/linux/
        # MacOS: https://github.com/actions/runner-images/blob/win22/20231002.1/images/macos/
        # Win22: https://github.com/actions/runner-images/blob/win22/20231002.1/images/win/
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        build_configuration: [Debug, Release, Dist]
        include:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            triplet: x64-windows

          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            triplet: x64-windows

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            triplet: x64-linux

          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            triplet: x64-osx

    steps:
    - uses: actions/checkout@v4
      # Checkout v4. See: https://github.com/actions/checkout

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "vcpkg-install-root=${VCPKG_INSTALLATION_ROOT}" >> "$GITHUB_OUTPUT"

    - name: Add VS toolchain to path on Windows (windows-latest)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install tools with Chocolatey (windows-latest)
      if: ${{ matrix.os == 'windows-latest' }}
      run: choco install ninja

    - name: Install tools with apt install (ubuntu-latest)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install -y ninja-build

    - name: Install tools with brew (macos-latest)
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install ninja

    - name: Install package dependencies using VCPKG
      run: vcpkg install gtest

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a
      # single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G "Ninja"
        -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}"
        -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}"
        -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.strings.outputs.vcpkg-install-root }}/scripts/buildsystems/vcpkg.cmake" -S ${{ github.workspace }}

    - name: Build project
      # Build your program with the given configuration. Note that --config is needed because the default
      # Windows generator is a multi-config generator (Visual Studio generator).
      # working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the
      # default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}


